# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TIQF74JPYu5VZabPn6lUejNrP6lkrBeD
"""

from operator import add, mul, sub
import random

score = 0  
questions = 0  
operators = {"+": add, "-": sub, "*": mul}
print("This is a test of your addition,multiplication,and subtraction....")
print("You will now be asked ten random questions...")
keys = list(operators)
for _ in range(5):  
    number1 = random.randint(0, 9)
    number2 = random.randint(0, 9)
    operator = random.choice(keys)
    if number2>number1:
      number1,number2=number2,number1
    answer = int(input("What is {} {} {}?\n".format(number1,operator, number2)))
    if answer == (operators[operator](number1, number2)):
        print("You are correct")
        print()
        score += 1
    else:
        print("Your answer is incorrect")
        print()
print("Your score is:",score)
if score>=2:
  print("Pass")
else:
  print("Fail")









list = []
num = int(input('How many numbers: '))
for n in range(num):
    numbers = int(input('Enter number '))
    list.append(numbers)
print("Sum of elements in given list is :", sum(list))

lst = []
num = int(input('How many numbers: '))
for n in range(num):
    numbers = int(input('Enter number '))
    lst.append(numbers)
def multiplyList(Lst) : 
    result = 1
    for x in Lst: 
         result = result * x  
    return result
print("Multiplication of all number in list is:", multiplyList(lst))

n = int(input('Enter number '))
factorial = 1
if n < 0:
   print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
   print("The factorial of 0 is 1")
else:
   for i in range(1,n + 1):
       factorial = factorial*i
print("The factorial of",n,"is",factorial)

def str(s):
    d={"UPPER_CASE":0, "LOWER_CASE":0}
    for c in s:
        if c.isupper():
           d["UPPER_CASE"]+=1
        elif c.islower():
           d["LOWER_CASE"]+=1
        else:
           pass
    print ("Original String : ", s)
    print ("No. of Upper case characters : ", d["UPPER_CASE"])
    print ("No. of Lower case Characters : ", d["LOWER_CASE"])
#Enter the string here
str(' DIChakaO')

list = []
num = int(input('How many numbers in list: '))
for n in range(num):
    numbers = int(input('Enter number '))
    list.append(numbers)
new_list = []

[new_list.append(x) for x in list if x not in new_list]

print(new_list)

num = int(input('Enter the number you want to check wether it is prime or not::'))

if num > 1: 
  for i in range(2, num//2): 
    if (num % i) == 0: 
      print(num, "is not a prime number") 
    break
  else: 
	   print(num, "is a prime number")



x = [] 
  
# number of elemetns as input 
n = int(input("Enter number of elements : ")) 
  
# iterating till the range 
for i in range(0, n): 
    ele = int(input()) 
  
    x.append(ele) # adding the element 
      
print(lst)
def Sort(x):
  L=sorted(x)
  if x==L:
    return x
  else:
    i=0
    for i in range (len(x)):
        if x[i] > x[i+1] :
            break

    unsortedPart = x[i:]
    R = RecursiveMin(unsortedPart)
    I = unsortedPart.index(R)

    for j in range (len(x)):
        if x[j] > R :
            del x[(I+i)]
            x.insert(j,R)
            break

    return Sort(x)
def minimum(x):
    x = sorted(x)
    return x[0]

def maximum(x):
    x = sorted(x)
    return x[-1]

print("Minimum:")
print(minimum(x))
print("Minimum:")
print(maximum(x))
y = len(x) 
  
get_sum = sum(x) 
mean = get_sum / n 
  
print("Mean is: " + str(mean))

import random
def bubble_sort(list1):
  n = len(list1)
  for i in range(n):
    for j in range(0, n-i-1):
      if list1[j] > list1[j+1]:
        list1[j],list1[j+1] = list1[j+1],list1[j]
  print("Sorted List:", list1)
  print("Minimun is:", list1[0])
  print("Maximum is:", list1[99])
  
def average_count_sd(list1):
  tot = 0
  count = 0
  for i in list1:
    tot = tot + i
    count = count + 1
  avg = tot / len(list1)
  tot2 = 0
  for i in list1:
    tot2 = (i - avg)**2
  avg2 = (tot2 / len(list1))**0.5 
  print("Average is:",avg)
  print("Count is:",count)
  print("Standard Deviation is:", avg2)
  
list1 = []
for i in range(1,101):
  i = random.randint(0,100)
  list1.append(i)
print(list1)
average_count_sd(list1)

#SELECTION SORT
import sys 
import random
A = [random.randrange(1, 101) for _ in range(101)] 
for i in range(len(A)): 
    min_idx = i 
    for j in range(i+1, len(A)): 
        if A[min_idx] > A[j]: 
            min_idx = j         
    A[i], A[min_idx] = A[min_idx], A[i] 
print ("Sorted array") 
for i in range(len(A)): 
    print("%d" %A[i])

#bubble sort
import random
A = [random.randrange(1, 101) for _ in range(101)] 
def bubbleSort(A):
    for j in range(len(A)-1,0,-1):
        for i in range(j):
            if A[i]>A[i+1]:
                temp = A[i]
                A[i] = A[i+1]
                A[i+1] = temp
bubbleSort(A)
print(A)

#insertion sort
import random
A = [random.randrange(1, 101) for _ in range(101)] 
def insertionSort(A): 
    for i in range(1, len(A)): 
        key = A[i] 
        j = i-1
        while j >=0 and key < A[j] : 
                A[j+1] = A[j] 
                j -= 1
        A[j+1] = key 
insertionSort(A) 
print ("Sorted array is:") 
for i in range(len(A)): 
    print ("%d" %A[i])

#merge sort
import random
A = [random.randrange(1, 101) for _ in range(101)]  
def mergeSort(A):
    if len(A)>1:
        mid = len(A)//2
        lefthalf = A[:mid]
        righthalf = A[mid:]
        mergeSort(lefthalf)
        mergeSort(righthalf)
        i=j=k=0       
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                A[k]=lefthalf[i]
                i=i+1
            else:
                A[k]=righthalf[j]
                j=j+1
            k=k+1
        while i < len(lefthalf):
            A[k]=lefthalf[i]
            i=i+1
            k=k+1

        while j < len(righthalf):
            A[k]=righthalf[j]
            j=j+1
            k=k+1
mergeSort(A)
print(A)

#quick sort
def quickSort(A):
  quick(A,0,len(A)-1)
def quick(A,first,last):
  if first<last:
      split = partition(A,first,last)
      quick(A,first,split-1)
      quick(A,split+1,last)
def partition(A,first,last):
  pivot = A[first]
  left = first+1
  right = last
  done = False
  while not done:
      while left <= right and A[left] <= pivot:
          left = left + 1
      while A[right] >= pivot and right >= left:
          right = right -1
      if right < left:
          done = True
      else:
          temp = A[left]
          A[left] = A[right]
          A[right] = temp
  temp = A[first]
  A[first] = A[right]
  A[right] = temp
  return right
quickSort(A)
print(A)

